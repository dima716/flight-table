* {
  margin: 0;
  padding: 0;
  font: inherit;
  box-sizing: border-box;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}
audio,
canvas,
progress,
video {
  display: inline-block;
  vertical-align: baseline;
}
audio:not([controls]) {
  display: none;
  height: 0;
}
[hidden],
template {
  display: none;
}
html {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  -webkit-focus-ring-color: rgba(255,255,255,0);
  cursor: default;
}
body {
  font-size: 100%;
  line-height: 1;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}
a {
  background: transparent;
}
*:focus,
*:active,
*:hover {
  outline: 0;
}
hr {
  box-sizing: content-box;
  height: 0;
}
ol,
ul {
  list-style: none;
}
pre {
  -moz-tab-size: 4;
       tab-size: 4;
  white-space: pre-wrap;
}
q {
  quotes: '\201C' '\201D' '\2018' '\2019';
}
img {
  border: 0;
}
svg:not(:root) {
  overflow: hidden;
}
button,
input {
  line-height: normal;
}
button,
select {
  text-transform: none;
}
button {
  overflow: visible;
}
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  cursor: pointer;
}
button[disabled],
html input[disabled] {
  cursor: default;
}
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
}
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}
input[type="search"] {
  -webkit-appearance: textfield;
  box-sizing: content-box;
}
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}
textarea {
  overflow: auto;
  vertical-align: top;
}
button,
input,
select[multiple],
textarea {
  background-image: none;
}
input,
select,
textarea {
  border-radius: 0;
  box-shadow: none;
}
input,
textarea {
  resize: none;
  -webkit-user-select: text;
     -moz-user-select: text;
      -ms-user-select: text;
          user-select: text;
}
[placeholder]:focus::-webkit-input-placeholder {
  color: transparent;
}
[placeholder]:focus::-moz-placeholder {
  color: transparent;
}
[placeholder]:focus:-ms-input-placeholder {
  color: transparent;
}
[placeholder]:focus::placeholder {
  color: transparent;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
body {
  padding: 10px;
  color: #000;
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  font-size: 14px;
  background-color: #fff;
  cursor: default;
}
.timetable {
  width: 80%;
  vertical-align: middle;
  text-align: center;
  margin: auto;
  overflow: hidden;
  border-bottom: 1px solid #ddd;
  padding: 5px;
}
.timetable_fixed {
  top: 0;
  position: fixed;
  width: auto;
  display: none;
  background-color: #fff;
  z-index: 1;
}
@media only screen and (max-width: 801px) {
  .timetable__row {
    cursor: pointer;
  }
}
.timetable__body > .timetable__row:nth-child(4n+1) > .timetable__cell {
  border-bottom: none;
  border-top: none;
}
.timetable__body > .timetable__row:nth-child(4n+1) > .timetable__cell:after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #f9f9f9;
  z-index: -2;
}
.timetable__body > .timetable__row:not(.flight-details):hover {
  background-color: #ffa;
}
.timetable__body > .timetable__row:not(.flight-details) > .timetable__cell:hover:before {
  content: "";
  position: absolute;
  width: 100%;
  height: 10000px;
  top: -5000px;
  left: 0;
  background-color: #ffa;
  z-index: -1;
}
@media only screen and (max-width: 801px) {
  .timetable__body > .timetable__row:focus + .flight-details .flight-details__wrapper {
    border: 1px solid #ddd;
  }
  .timetable__body > .timetable__row:focus + .flight-details .flight-details__content {
    opacity: 1;
    max-height: 5000px;
  }
}
.timetable__cell {
  position: relative;
  padding: 5px;
  border: 1px solid #ddd;
}
.timetable__cell_type_heading {
  font-weight: 500;
  background-color: #707070;
  color: #fff;
}
@media only screen and (max-width: 1025px) {
  .timetable__cell:nth-child(4) {
    display: none;
  }
}
@media only screen and (max-width: 801px) {
  .timetable__cell:nth-child(3) {
    display: none;
  }
}
@media only screen and (max-width: 601px) {
  .timetable__cell:nth-child(5),
  .timetable__cell:nth-child(10) {
    display: none;
  }
}
@media only screen and (max-width: 376px) {
  .timetable__cell:nth-child(6),
  .timetable__cell:nth-child(7) {
    display: none;
  }
}
.flight-details {
  background-color: #fff;
}
.flight-details__item {
  padding: 10px;
  border-bottom: 1px solid #ddd;
  text-align: center;
}
.flight-details__item:last-child {
  border-bottom: none;
}
.flight-details__wrapper {
  padding: 0;
  text-align: left;
  border: none;
}
.flight-details__content {
  opacity: 0;
  max-height: 0;
  -webkit-transition: opacity 0.4s ease, max-height 0.4s ease;
          transition: opacity 0.4s ease, max-height 0.4s ease;
}
.flight-details__heading {
  margin: 5px 0;
  font-size: 1.2em;
  font-weight: bold;
}
.airplane__type_form_short {
  display: none;
}
@media only screen and (max-width: 801px) {
  .airplane__type {
    display: none;
  }
  .airplane__type_form_short {
    display: block;
  }
}
.airport__title {
  margin-right: 5px;
}
@media only screen and (max-width: 801px) {
  .airport__code {
    display: none;
  }
}
.airport__code {
  color: #555;
}
.flight-icon {
  display: inline-block;
}
.flight-icon_type_landing {
  background-image: url("../images/sprite.png");
  background-position: 0px 0px;
  width: 32px;
  height: 32px;
}
.flight-icon_type_takeoff {
  background-image: url("../images/sprite.png");
  background-position: -40px 0px;
  width: 32px;
  height: 32px;
}
.controls {
  text-align: center;
  margin: 15px 0;
}
.controls__checkbox {
  margin-right: 5px;
}
.controls__label {
  margin-right: 10px;
}
.message {
  display: none;
  width: 80%;
  margin: auto;
  margin-top: 15px;
  padding: 10px;
  background-color: #d9edf7;
  background-image: -webkit-linear-gradient(top, #d9edf7 0, #b9def0 100%);
  background-image: linear-gradient(to bottom, #d9edf7 0, #b9def0 100%);
  background-repeat: repeat-x;
  text-shadow: 0 1px 0 rgba(255,255,255,0.2);
  box-shadow: inset 0 1px 0 rgba(255,255,255,0.25), 0 1px 2px rgba(0,0,0,0.05);
  border: 1px solid #9acfea;
  border-radius: 4px;
  text-align: center;
  font-size: 16px;
  color: #31708f;
}
/*# sourceMappingURL=data:application/json;base64, */